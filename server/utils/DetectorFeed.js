// Generated by IcedCoffeeScript 1.3.3d
var DetectorFeed, Observable, SerialPort,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Observable = require("./shared/Observable");

SerialPort = (require("serialport")).SerialPort;

DetectorFeed = (function(_super) {

  __extends(DetectorFeed, _super);

  function DetectorFeed() {
    var _this = this;
    DetectorFeed.__super__.constructor.apply(this, arguments);
    this.currentSockets = {};
    this.tripCount = 0;
    this.lastTripped = Date.now();
    console.log("Creating DETECTOR FEED");
    this.sockets.on("connection", function(socket) {
      console.log("Sending news: " + socket.id);
      _this.currentSockets[socket.id] = socket;
      socket.on("disconnect", function() {
        console.log("socket disconnected:" + socket.id);
        return delete _this.currentSockets[socket.id];
      });
      socket.on("getNews", function() {
        return _this.sendNews(socket);
      });
      return _this.sendNews(socket);
    });
  }

  DetectorFeed.prototype.startSerialPort = function() {
    var last, port, timer,
      _this = this;
    port = new SerialPort("/dev/ttyACM0", {
      baudrate: 9600
    });
    last = 0;
    port.on('data', function(data) {
      var id, s, sock, status, _ref;
      s = data.toString();
      status = parseInt(s.slice(s.length - 2, s.length - 1));
      if (status !== last && status === 1) {
        _this.tripCount += 1;
        _ref = _this.currentSockets;
        for (id in _ref) {
          sock = _ref[id];
          _this.sendNews(sock);
        }
      }
      return last = status;
    });
    timer = function() {
      return port.write('~in0D~');
    };
    return setInterval(timer, 1000);
  };

  DetectorFeed.prototype.sendNews = function(socket) {
    return socket.emit("news", {
      sensorName: "motionsensor",
      sensorValue: this.tripCount,
      lastTripped: this.lastTripped
    });
  };

  return DetectorFeed;

})(Observable);

global.exports = module.exports = DetectorFeed;
